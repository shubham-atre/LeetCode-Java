//O(logn)
class Solution {
    public int search(int[] nums, int target) {
        
        int pivot = findPivot(nums, 0, nums.length -1);
        
        if(pivot == -1)
            return -1;
        if(nums[pivot] == target)
            return pivot;
        if(nums[0] <= target)
            return binarySearch(nums,0,pivot -1,target);
        return binarySearch(nums, pivot +1, nums.length -1 ,target);
    }
    
    public static int binarySearch(int[] nums, int low,int high,int target){
        if (high < low)
            return -1;

        /* low + (high - low)/2; */
        int mid = (low + high)/2;
        if (target == nums[mid])
            return mid;
        if (target > nums[mid])
            return binarySearch(nums, (mid + 1), high, target);
        return binarySearch(nums, low, (mid -1), target);
    }
    
    public static int findPivot(int[] arr, int low, int high){
    if(high<low){
        return -1;
    }
    if(high == low){
        return low;
    }
    int mid = (low + high)/2;
    if(mid < high && arr[mid] > arr[mid + 1])
        return mid;
    if(mid > low && arr[mid] < arr[mid - 1])
        return mid-1;    
    if(arr[low] > arr[mid])
        return findPivot(arr, low, mid-1);
    else
        return findPivot(arr, mid + 1, high);
    }
    
    
}
