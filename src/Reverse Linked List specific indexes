//iterative
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) 
    {
       if(head==null||head.next==null)  return head;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        
        while(pre.next!=null && m!=1)
        {
            pre = pre.next;
            m--;
            n--;
        }
        
        ListNode curr = pre.next;
        
        while(curr.next!=null && n!=1)
        {
            ListNode next = curr.next;
            curr.next = next.next;
            next.next = pre.next;
            pre.next  = next;
            n--;
        }
        
        return dummy.next;
    }
}

//recursive
public ListNode reverseBetween(ListNode head, int m, int n) {
        if(m==n){
            return head;
        }
        if(m>1){
            ListNode newHead = head;
            newHead.next = reverseBetween(head.next, m-1, n-1);
            return newHead;
        }else{
            ListNode next = head.next;
            ListNode newHead = reverseBetween(next, 1, n-1);
            ListNode nextnext = next.next;
            next.next = head;
            head.next = nextnext;
            return newHead;
        }
    }
