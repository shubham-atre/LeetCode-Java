//N(KlogK) total, KlogK for sorting, Space NK
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) 
    {
      
        
       List<List<String>> result = new ArrayList<>();
       HashMap<String,List<String>> map= new LinkedHashMap();
        
       if(strs == null || strs.length == 0)
       {
           return result;
       }
        
        
       for(String s : strs)
       {
           char[] str = s.toCharArray();
           Arrays.sort(str);
           String temp = String.valueOf(str);
           
           if(!map.containsKey(temp))
           {
               map.put(temp,new ArrayList<>());
           }
       
               map.get(temp).add(s);
       }

       return new ArrayList<List<String>> (map.values());
    }
}

//O(NK) using count as key ###FROM LC SOLUTION#######
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        int[] count = new int[26];
        for (String s : strs) {
            Arrays.fill(count, 0);
            for (char c : s.toCharArray()) count[c - 'a']++;

            StringBuilder sb = new StringBuilder("");
            for (int i = 0; i < 26; i++) {
                sb.append('#');
                sb.append(count[i]);
            }
            String key = sb.toString();
            if (!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s);
        }
        return new ArrayList(ans.values());
    }
}
