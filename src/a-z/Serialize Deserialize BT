//DFS Preorder O(N) time and O(N) space, as entire tree is kept for both ops
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(root, sb);
        return sb.toString();
        
    }
    
    void serialize(TreeNode root, StringBuilder sb)
    {
        if(root==null)
        {
            sb.append("#,");
            return;
        }
        else
        {
            sb.append(root.val);
            sb.append(",");
            serialize(root.left, sb);
            serialize(root.right, sb);
        }
        
        return;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
        Queue<String> list = new LinkedList<>(Arrays.asList(data.split(",")));
        return deserialize(list);
        
    }
    
    TreeNode deserialize(Queue<String> data)
    {
        String q=data.poll();
        if(q.equals("#"))
        {
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(q));
        
        root.left=deserialize(data);
        root.right=deserialize(data);
        return root;
        
    }
}



//BST
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(root, sb);
        return sb.toString();
    }
    
    public void serialize(TreeNode root, StringBuilder sb) {
        if (root == null) return;
        sb.append(root.val).append(",");
        serialize(root.left, sb);
        serialize(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.isEmpty()) return null;
        Queue<String> q = new LinkedList<>(Arrays.asList(data.split(",")));
        return deserialize(q, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    public TreeNode deserialize(Queue<String> q, int lower, int upper) {
        if (q.isEmpty()) return null;
        String s = q.peek();
        int val = Integer.parseInt(s);
        if (val < lower || val > upper) return null;
        q.poll();
        TreeNode root = new TreeNode(val);
        root.left = deserialize(q, lower, val);
        root.right = deserialize(q, val, upper);
        return root;
    }
}
