class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<>();
        
        add(root, res, 0);
        
        return res;
        
    }
    
    void add(TreeNode root, List<List<Integer>> res, int level)
    {
        if(root==null) return;
        
        if(level>=res.size())
        {
            res.add(new ArrayList<Integer>());
        }
        
         if(level%2==0)
        {
            res.get(level).add(root.val);
        }
        else
        {
            res.get(level).add(0, root.val);
        }
        
        add(root.left, res, level+1);
        add(root.right, res, level+1);
    }
}

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null)
          return result;
        Stack<TreeNode> currentlevel = new Stack<>();
        Stack<TreeNode> nextlevel = new Stack<>();
        currentlevel.push(root);
        while(!currentlevel.isEmpty()){
            List<Integer> temp = new ArrayList<>();
            while(!currentlevel.isEmpty()){
                TreeNode curr = currentlevel.pop();
                temp.add(curr.val);
                if(curr.left!=null) nextlevel.push(curr.left);
                if(curr.right!=null) nextlevel.push(curr.right);
            }
            result.add(temp);
            temp = new ArrayList<>();
            while(!nextlevel.isEmpty()){
                TreeNode curr = nextlevel.pop();
                temp.add(curr.val);
                if(curr.right!=null) currentlevel.push(curr.right);
                if(curr.left!=null) currentlevel.push(curr.left);
            }
            if(!temp.isEmpty()) result.add(temp);
            
        }
        
        return result;
        
    }
}
