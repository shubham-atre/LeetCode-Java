//O(N) bucket sort
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {

    List<Integer> ans = new ArrayList<>();
	List<Integer>[] bucket = new List[nums.length + 1];
	Map<Integer, Integer> counts = new HashMap<Integer, Integer>();

	for (int n : nums) {
		counts.put(n, counts.getOrDefault(n, 0) + 1);
	}

	for (int key : counts.keySet()) {
		int count = counts.get(key);
		if (bucket[count] == null) {
			bucket[count] = new ArrayList<>();
		}
		bucket[count].add(key);
	}

	for (int i = bucket.length - 1; i >= 0 && ans.size() < k; i--) {
		
        if(bucket[i] == null) continue;
        for(int j=0;j<bucket[i].size();j++)
        {
            ans.add(bucket[i].get(j));
            if(ans.size()==k)
                break;
        }
        
	}
	return ans;
}
}
