class MinStack {

    /** initialize your data structure here. */
   // public MinStack() {
        
    //}
    Stack<Integer> stack = new Stack<>();
    int min = Integer.MAX_VALUE;
    public void push(int x) {
        if(x<=min){
            stack.push(min);
            min = x; 
        }
        stack.push(x);
        
    }
    
    public void pop() {
        if(stack.pop()==min){
            min=stack.pop();
        }
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
    
}

//uisng linked nodes
class MinStack {

    Node head;
    public void push(int x) {
      if(head == null)  
          head = new Node(x,x);
      else
          head = new Node(x,Math.min(x,head.min),head);  
    }
    
    public void pop() {
        head = head.next;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
    
    private class Node{
        int min;
        int val;
        Node next;
        
        private Node(int x, int min){
            this(x,min,null);
        }
        
        private Node(int val,int min,Node next){
            this.val = val;
            this.min = min;
            this.next = next;
        }
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
