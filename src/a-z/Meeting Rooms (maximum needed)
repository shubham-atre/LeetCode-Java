//Nlog(N) sorting NlogN and heap extraction logN per N element worst case, O(N) size of heap
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals.length ==0)
            return 0;
        Arrays.sort(intervals, new Comparator<Interval>(){
           public int compare(Interval i1, Interval i2){
              return i1.start - i2.start;
           } 
        });
        
        PriorityQueue<Integer> allocator = new PriorityQueue<Integer>(intervals.length, new             Comparator<Integer>(){
           public int compare(Integer a, Integer b){
               return a - b;
           } 
        });
        
        allocator.add(intervals[0].end);
        
        for(int i =1; i< intervals.length; i++){
            if(intervals[i].start >= allocator.peek()){
                allocator.poll();
            }
            allocator.add(intervals[i].end);
        }
        return allocator.size();
    }
}



//two pointer for start and end O(NLogN) due to sorting
public class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        for(int i=0; i<intervals.length; i++) {
            starts[i] = intervals[i][0];
            ends[i] = intervals[i][1];
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        int startPointer = 0;
        int endPointer = 0;
        int usedRooms = 0;

    // Iterate over intervals.
    while (startPointer < intervals.length) {

      // If there is a meeting that has ended by the time the meeting at `start_pointer` starts
      if (starts[startPointer] >= ends[endPointer]) {
        usedRooms -= 1;
        endPointer += 1;
      }

      // We do this irrespective of whether a room frees up or not.
      // If a room got free, then this used_rooms += 1 wouldn't have any effect. used_rooms would
      // remain the same in that case. If no room was free, then this would increase used_rooms
      usedRooms += 1;
      startPointer += 1;

    }
        return usedRooms;
    }
}
