//O(logN+k)
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
         
        int index = binarySearch(arr, x);
        int left = index - 1;
        int right = index;
        int count = 0;
        List<Integer> ans = new ArrayList<>();
        while(count < k) {
            int leftDiff = left >= 0 ? x - arr[left] : Integer.MAX_VALUE;
            int rightDiff = right < arr.length ? arr[right] - x : Integer.MAX_VALUE;
            if (leftDiff <= rightDiff) {
                ans.add(0, arr[left--]);
            } else {
                ans.add(arr[right++]);
            }
            count++;
        }
        return ans;
    }
    
    //binary search algorithm
    public int binarySearch(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while(low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}

//O(log(N-k))
public List<Integer> findClosestElements(int[] A, int k, int x) {
        int left = 0, right = A.length - k;
        while (left < right) {
            int mid = (left + right) / 2;
            if (x - A[mid] > A[mid + k] - x)
                left = mid + 1;
            else
                right = mid;
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < k; i++) res.add(A[left + i]);
        return res;
    }
