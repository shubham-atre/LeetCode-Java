//O(1) time to find winner, O(n) space
public class TicTacToe {

	private int[] rows;
	private int[] cols;
	private int size;
	private int diagonal;
	private int anti_diagonal;
	/** Initialize your data structure here. */
    public TicTacToe(int n) {
    	size = n;
        rows = new int[n];
        cols = new int[n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        int add = player == 1 ? 1 : -1;
        if(col == row){
        	diagonal += add;
        }
        if(col == size - 1 - row){
        	anti_diagonal += add;
        }
        rows[row] += add;
        cols[col] += add;
        if(Math.abs(rows[row]) == size || Math.abs(cols[col]) == size|| Math.abs(diagonal) == size || Math.abs(anti_diagonal) == size){
        	return player;
        }
        return 0;
    }
}
