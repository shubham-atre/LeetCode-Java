class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = null;
        ListNode tail = null;
        
        if (lists == null || lists.length == 0)
            return null;
    
        
        PriorityQueue<ListNode> pq = new PriorityQueue<>(new Comparator<ListNode>(){
            public int compare(ListNode a, ListNode b){
                return a.val - b.val;
            }
        });
        
        for(int i = 0;i< lists.length;i++){
            if(lists[i] != null){
            pq.add(lists[i]);
            }
        }
        while(!pq.isEmpty()){
            ListNode top = pq.peek();
            pq.remove();
        
        if(top.next != null){
            pq.add(top.next);
        }
        
        if(head == null){
            head = top;
            tail = top;
        }else{
            tail.next = top;
            tail = top;
        }
    }
       return head; 
    }
}
