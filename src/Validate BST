public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        return validateBSTHelper(root, null, null);
    }
    
    public static boolean validateBSTHelper(TreeNode node, Integer lower_limit, Integer upper_limit){
        if((lower_limit!= null) && (lower_limit >= node.val))
            return false;
        if((upper_limit!= null) && (upper_limit <= node.val))
            return false;
        
        boolean left = node.left != null ? validateBSTHelper(node.left,lower_limit, node.val) : true;
        if(left){
            boolean right = node.right != null ? validateBSTHelper(node.right,node.val, upper_limit) : true;
            return right;
        }else{
            return false;
        }
    }
    
//iterative
  // in-order traversal iteratively
public boolean isValidBST(TreeNode root) {
    Integer pre = null;
    Stack<TreeNode> stack = new Stack<>();
    while (true) {
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
        if (stack.isEmpty()) {
            return true;
        }
        TreeNode node = stack.pop();
        if (pre != null && pre >= node.val) {
            return false;
        }
        pre = node.val;
        root = node.right;
    }
}
