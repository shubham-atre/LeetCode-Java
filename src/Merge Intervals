//O(N)
//###########Pay attention to input type###################
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
     
        
        if(intervals.size()==0) return intervals;
        
        Collections.sort(intervals, (x,y)-> x.start-y.start);
        
        List<Interval> ans = new ArrayList<>();
        
        ans.add(intervals.get(0));
        for(Interval i:intervals) {
            Interval lst = ans.get(ans.size()-1);
            if(i.start<=lst.end)
            {
                ans.get(ans.size()-1).end = Math.max(ans.get(ans.size()-1).end, i.end);
            }
            else
                ans.add(i);
        }
        
        return ans;
    }
}
