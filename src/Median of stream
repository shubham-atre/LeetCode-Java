//O(logn)
class MedianFinder {
    PriorityQueue<Integer> left, right;

    public MedianFinder() {
        left = new PriorityQueue<> ((a, b) -> b - a);
        right = new PriorityQueue<> ();
    }
    
    public void addNum(int num) {
        if (left.isEmpty () || num <= left.peek ()) left.offer (num);
        else right.offer (num);
        if (left.size () - right.size () > 1) right.offer (left.poll ());
        if (right.size () - left.size () > 1) left.offer (right.poll ());
    }
    
    public double findMedian() {
        if (left.size () != right.size ()) return (double) (left.size () > right.size () ? left.peek () : right.peek ());
        else return (left.peek () + right.peek ()) / 2.0;
    }
}
