public class Solution {
    public void connect(TreeLinkNode root) {
        
        if(root==null)
            return;
        
        link(root, null, null);
    }
    
    void link(TreeLinkNode root, TreeLinkNode right, TreeLinkNode root_right)
    {
        if(root==null)
            return;
        
        root.next=right;
        
        link(root.left, root.right, root.right);
        link(root.right, root_right==null?null:root_right.left, root_right==null?null:root_right.left);
        
    }
}


//iterative
public class Solution {
    public Node connect(Node root) {
        // 6:27pm - 6:35pm
        // iterative, level-order traversal using queue
        if (root == null) {
            return root;
        }
        LinkedList<Node> queue = new LinkedList<Node>();
        queue.offer(root);
        while (queue.size() != 0) {
            int size = queue.size();
            Node prev = null;
            for (int i = 0; i < size; i++) {
                Node curr = queue.poll();
                if (prev != null) {
                    prev.next = curr;
                }
                prev = curr;
                if (curr.left != null) {
                    queue.offer(curr.left);
                }
                if (curr.right != null) {
                    queue.offer(curr.right);
                }
            }
            prev.next = null;
        }
    return root;
    }
}
