/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root==null)
            return result;
        HashMap<TreeNode,Integer> weight = new HashMap<>();
        HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        weight.put(root,0);
        int min =0;
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            int w = weight.get(node);
            if(!map.containsKey(w)){
                map.put(w,new ArrayList<>());
            }
            
            map.get(w).add(node.val);
            
            if(node.left!=null){
                queue.offer(node.left);
                weight.put(node.left,w-1);
            }
            
            if(node.right!=null){
                queue.offer(node.right);
                weight.put(node.right,w+1);
            }
           min = Math.min(min, w);
        }
        
        while(map.containsKey(min)){
            result.add(map.get(min));
            min++;
        }
        
        return result;
        
    }
}
