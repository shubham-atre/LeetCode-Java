//Nlog(N) sorting NlogN and heap extraction logN per N element worst case, O(N) size of heap
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals.length ==0)
            return 0;
        Arrays.sort(intervals, new Comparator<Interval>(){
           public int compare(Interval i1, Interval i2){
              return i1.start - i2.start;
           } 
        });
        
        PriorityQueue<Integer> allocator = new PriorityQueue<Integer>(intervals.length, new             Comparator<Integer>(){
           public int compare(Integer a, Integer b){
               return a - b;
           } 
        });
        
        allocator.add(intervals[0].end);
        
        for(int i =1; i< intervals.length; i++){
            if(intervals[i].start >= allocator.peek()){
                allocator.poll();
            }
            allocator.add(intervals[i].end);
        }
        return allocator.size();
    }
}



//two pointer for start and end O(NLogN) due to sorting
public class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int[] starts = new int[intervals.length];
        int[] ends = new int[intervals.length];
        for(int i=0; i<intervals.length; i++) {
            starts[i] = intervals[i][0];
            ends[i] = intervals[i][1];
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        int rooms = 0;
        int endsItr = 0;
        for(int i=0; i<starts.length; i++) {
            if(starts[i]<ends[endsItr])
                rooms++;
            else
                endsItr++;
        }
        return rooms;
    }
}
