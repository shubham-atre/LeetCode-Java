/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //O(N) time and O(N) for storing result
class Solution {
    List<Integer> nodes = new ArrayList<>();
    
    public List<Integer> boundaryOfBinaryTree(TreeNode root)
    {
        if(root==null) return nodes;
        
        nodes.add(root.val);
        
        leftBoundary(root.left);
        leafNode(root.left);
        leafNode(root.right);
        rightBoundary(root.right);
        
        return nodes;
    }
    
    
    public void leftBoundary(TreeNode root)
    {
        if(root==null || (root.right==null && root.left==null))
        {
            return;
        }
        
        nodes.add(root.val);
        
        if(root.left==null)
            leftBoundary(root.right);
        else
            leftBoundary(root.left);
    }
    
    public void rightBoundary(TreeNode root)
    {
        if(root==null || (root.right == null && root.left == null))
        {
            return;
        }
        
        if(root.right==null)
            rightBoundary(root.left);
        else
            rightBoundary(root.right);
        
        nodes.add(root.val);
        
    }
    
    public void leafNode(TreeNode root)
    {
        if(root==null) return;
        
        if(root.left==null && root.right==null)
        {
            nodes.add(root.val);
            return;
        }
        
        leafNode(root.left);
        leafNode(root.right);
    }
    
}
